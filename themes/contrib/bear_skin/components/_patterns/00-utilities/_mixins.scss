@mixin element-invisible {
  position: absolute;
  height: 0;
  width: 0;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

@mixin element-invisible-off {
  position: relative;
  height: auto;
  width: auto;
  overflow: inherit;
  clip: none;
}

@mixin link($color, $text-decoration, $hover-color, $hover-text-decoration) {
  color: $color;
  text-decoration: $text-decoration;

  &:visited {
    color: $color;

    &:hover,
    &:focus {
      color: $hover-color;
      text-decoration: $hover-text-decoration;
    }
  }

  &:hover,
  &:focus {
    color: $hover-color;
    text-decoration: $hover-text-decoration;
  }
}

@function hex($color, $percentage) {
  @if $percentage == .1 {
    @return lighten($color, 45%);
  }
  @if $percentage == .2 {
    @return lighten($color, 40%);
  }
  @if $percentage == .3 {
    @return lighten($color, 35%);
  }
  @if $percentage == .4 {
    @return lighten($color, 30%);
  }
  @if $percentage == .5 {
    @return lighten($color, 25%);
  }
  @if $percentage == .6 {
    @return lighten($color, 20%);
  }
  @if $percentage == .7 {
    @return lighten($color, 15%);
  }
  @if $percentage == .8 {
    @return lighten($color, 10%);
  }
  @if $percentage == .9 {
    @return lighten($color, 5%);
  }
}

// Alpha Color
// Include in an element to create a transparent background or color with a hex
// value fallback for older browsers.
@mixin alpha-color($type, $color, $percentage) {
  @if $type == color {
    color: rgba($color, $percentage);
  }
  @if $type == background {
    background-color: rgba($color, $percentage);
  }
}

@mixin button($color, $background-color, $background-hover) {
  @include sans;
  @include fontsize(13, all);

  position: relative;
  display: inline-block;
  outline: none;
  text-decoration: none;
  cursor: pointer;
  border-style: none;
  transition: background .2s ease-in-out;
  text-transform: uppercase;

  background: $background-color;
  color: $white;
  padding: $ui-button-padding;
  border-radius: $ui-border-radius;

  &:hover,
  &:focus {
    background: $background-hover;
    text-decoration: none;
  }
}

@mixin placeholder {
  font-size: 12px;
  font-weight: 400;
}

@mixin serif {
  font-family: unquote(map-get($bodytype, font-family));
}

@mixin sans {
  font-family: unquote(map-get($headingtype, font-family));
}

// Generates classes based on map keys.
//
// @param $map
//   A map full of maps. See $c-palette in _variables.scss.
// @param $variants
//   A Sass list of variants classes should be generated for.
// @param $prefix
//   A string that will be appended to the front of the generated class names.
// @param $property
//   The CSS property the generated classes will set. A string.
//
// Classes will only be generated for each color if the corresponding variant is
// found. For example, if my first $c-palette color only has values for "base"
// and "dark", no "light" class will be generated.
//
@mixin generate-key-classes($map, $variants, $prefix, $property) {
  @each $key, $value in $map {
    @each $variant in $variants {
      $prop-value: map-get($value, $variant);

      @if $variant == 'base' {
        .#{$prefix}-#{$key} {
          #{$property}: $prop-value;
        }
      }
      @else {
        @if map-has-key($value, $variant) {
          .#{$prefix}-#{$key}--#{$variant} {
            #{$property}: $prop-value;
          }
        }
      }
    }
  }
}

// Generates classes based on map values.
//
// @param $map
//   A map full of maps. See $c-palette in _variables.scss.
// @param $variants
//   A Sass list of variants classes should be generated for.
// @param $prefix
//   A string that will be appended to the front of the generated class names.
// @param $property
//   The CSS property the generated classes will set. A string.
//
// Classes will only be generated for each color if the corresponding variant is
// found. For example, if my first $c-palette color only has values for "base"
// and "dark", no "light" class will be generated.
//
@mixin generate-value-classes($map, $variants, $prefix, $property) {
  @each $key, $value in $map {
    @each $variant in $variants {
      // Strip any # from hex codes for use in class names.
      $base-value: map-get($value, 'base');
      $clean-value: str-replace(#{$base-value}, '#', '');

      $prop-value: map-get($value, $variant);

      @if $variant == 'base' {
        .#{$prefix}-#{$clean-value} {
          #{$property}: $prop-value;
        }
      }
      @else {
        @if map-has-key($value, $variant) {
          .#{$prefix}-#{$clean-value}--#{$variant} {
            #{$property}: $prop-value;
          }
        }
      }
    }
  }
}
